{"version":3,"sources":["components/dougnut.jsx","components/card.jsx","components/bar.jsx","components/grid-3.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Dougnut","state","data","labels","datasets","label","backgroundColor","borderWidth","this","Component","useStyles","makeStyles","root","media","height","MediaCard","classes","Card","className","CardActionArea","CardContent","Typography","gutterBottom","variant","component","CardActions","Button","size","color","BarChart","options","scales","xAxes","gridLines","display","maintainAspectRatio","theme","flexGrow","paper","control","padding","spacing","SpacingGrid","React","useState","Grid","container","item","xs","sm","md","lg","Paper","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","marginTop","ResponsiveDrawer","props","window","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","Divider","List","map","text","index","ListItem","button","key","ListItemIcon","ListItemText","primary","undefined","document","body","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","onClick","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","ModalProps","keepMounted","xsDown","App","Fragment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.14f0ee4c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nclass Dougnut extends Component {\r\n    state = { \r\n        data: {\r\n            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\r\n            datasets: [{\r\n                label: '# of Votes',\r\n                data: [12, 19, 3, 5, 2, 3],\r\n                backgroundColor: [\r\n                    'rgba(255, 99, 132)',\r\n                    'rgba(54, 162, 235)',\r\n                    'rgba(255, 206, 86)',\r\n                    'rgba(75, 192, 192)',\r\n                    'rgba(153, 102, 255)',\r\n                    'rgba(255, 159, 64)'\r\n                ],\r\n                // borderColor: [\r\n                //     'rgba(255, 99, 132, 1)',\r\n                //     'rgba(54, 162, 235, 1)',\r\n                //     'rgba(255, 206, 86, 1)',\r\n                //     'rgba(75, 192, 192, 1)',\r\n                //     'rgba(153, 102, 255, 1)',\r\n                //     'rgba(255, 159, 64, 1)'\r\n                // ],\r\n                borderWidth: 0\r\n            }]\r\n        }\r\n     }\r\n    render() { \r\n        return ( \r\n            <Doughnut\r\n                data={this.state.data}\r\n                //width={100}\r\n                //height={50}\r\n                //options={{ maintainAspectRatio: false }}\r\n            />\r\n         );\r\n    }\r\n}\r\n \r\nexport default Dougnut;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Example from './dougnut'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n       // maxWidth: 345,\r\n       // backgroundColor:'#dddddd'\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\n\r\nexport default function MediaCard() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        Lizard\r\n                    </Typography>\r\n                    <Example/>\r\n                   \r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\">\r\n                    More\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nclass BarChart extends Component {\r\n    state = { \r\n            data: {\r\n                labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\r\n                datasets: [{\r\n                    label: '# of Votes',\r\n                    data: [12, 19, 3, 5, 2, 3],\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132)',\r\n                        'rgba(54, 162, 235)',\r\n                        'rgba(255, 206, 86)',\r\n                        'rgba(75, 192, 192)',\r\n                        'rgba(153, 102, 255)',\r\n                        'rgba(255, 159, 64)'\r\n                    ],\r\n                    // borderColor: [\r\n                    //     'rgba(255, 99, 132, 1)',\r\n                    //     'rgba(54, 162, 235, 1)',\r\n                    //     'rgba(255, 206, 86, 1)',\r\n                    //     'rgba(75, 192, 192, 1)',\r\n                    //     'rgba(153, 102, 255, 1)',\r\n                    //     'rgba(255, 159, 64, 1)'\r\n                    // ],\r\n                    borderWidth: 0\r\n            }],\r\n            options: {\r\n                scales: {\r\n                    xAxes: [{\r\n                        gridLines: {\r\n                            display: false,\r\n                        },\r\n                    }],\r\n                },\r\n            },\r\n        }\r\n     }\r\n    render() { \r\n        return ( \r\n            <Bar\r\n                data={this.state.data}\r\n            //width={100}\r\n            height='290px'\r\n            options={{ maintainAspectRatio: false }}\r\n            />\r\n         );\r\n    }\r\n}\r\n \r\nexport default BarChart;","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MediaCard from \"./card\";\r\nimport BarChart from \"./bar\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    //height: 140,\r\n    //width: 'auto',\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function SpacingGrid() {\r\n  const [spacing, setSpacing] = React.useState(2);\r\n  const classes = useStyles();\r\n\r\n  const handleChange = (event) => {\r\n    setSpacing(Number(event.target.value));\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} sm={12} md={4} lg={4}>\r\n        <Paper className={classes.paper}>\r\n          <MediaCard />\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={12} sm={12} md={4} lg={4}>\r\n        <Paper className={classes.paper}>\r\n                  <BarChart/>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={12} sm={12} md={4} lg={4}>\r\n        <Paper className={classes.paper}>\r\n          <MediaCard />\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport MediaCard from './card'\r\nimport SpacingGrid from './grid-3'\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            \r\n        },\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        marginTop: 50,\r\n        //backgroundColor:'#1b1b2f'\r\n    },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n    const { window } = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar} />\r\n            <Divider />\r\n            <List>\r\n                {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                    <ListItem button key={text}>\r\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                        <ListItemText primary={text} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n\r\n            <List>\r\n                {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                    <ListItem button key={text}>\r\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                        <ListItemText primary={text} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                    <ListItem button key={text}>\r\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                        <ListItemText primary={text} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </div>\r\n    );\r\n\r\n    const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        Admin Dashboard\r\n          </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n                <Hidden smUp implementation=\"css\">\r\n                    <Drawer\r\n                        container={container}\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true, // Better open performance on mobile.\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation=\"css\">\r\n                    <Drawer\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n            <main className={classes.content}>\r\n                <SpacingGrid />\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n    /**\r\n     * Injected by the documentation to work in an iframe.\r\n     * You won't need it on your project.\r\n     */\r\n    window: PropTypes.func,\r\n};\r\n\r\nexport default ResponsiveDrawer;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ResponsiveDrawer from './components/navbar'\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <ResponsiveDrawer />\n      </React.Fragment>\n    )\n  }\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ResponsiveDrawer from '../src/components/navbar'\n\nReactDOM.render(\n  <React.StrictMode><App /></React.StrictMode>, document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}